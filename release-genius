#!/usr/bin/env php
<?php

/*
 * (c) Alexandre Daubois <alex.daubois@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

if (\PHP_VERSION_ID < 80200) {
    fwrite(
        \STDERR,
        \sprintf("You must use at least PHP 8.2.0, and you're using PHP %s. Please consider upgrading your PHP binary.", \PHP_VERSION)
    );

    exit(1);
}

if (isset($GLOBALS['_composer_autoload_path'])) {
    \define('LOCAL_COMPOSER_INSTALL', $GLOBALS['_composer_autoload_path']);
} else {
    foreach ([__DIR__.'/../../autoload.php', __DIR__.'/../vendor/autoload.php', __DIR__.'/vendor/autoload.php'] as $file) {
        if (\file_exists($file)) {
            \define('LOCAL_COMPOSER_INSTALL', $file);

            break;
        }
    }

    unset($file);
}

if (!defined('LOCAL_COMPOSER_INSTALL')) {
    \fwrite(
        \STDERR,
        'Composer has not been setup. Please consider running `composer install`.'.\PHP_EOL
    );

    exit(1);
}

require LOCAL_COMPOSER_INSTALL;

use ConventionalVersion\Runner;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\SingleCommandApplication;

(new SingleCommandApplication())
    ->setName('Conventional Version')
    ->setDescription('Generate a new release based on the conventional commits')
    ->addArgument('release type', InputArgument::OPTIONAL, 'The type of release to be generated (major, minor, patch)')
    ->addOption('path', 'f', InputOption::VALUE_REQUIRED, 'The file to write the changelog to', 'CHANGELOG.md')
    ->addOption('mode', 'm', InputOption::VALUE_REQUIRED, 'The writing mode to use when writing the changelog to a file, between prepend, append and overwrite', 'prepend')
    ->addOption('init', 'i', InputOption::VALUE_NONE, 'Initialize the changelog file and create a new git tag')
    ->addOption('remote', 'r', InputOption::VALUE_REQUIRED, 'The remote to push the tag to; This is also used to generate URLs in the Changelog (use "none" if you don\'t use a remote)', 'origin')
    ->addOption('remote-type', null, InputOption::VALUE_REQUIRED, 'The type of remote to use; This is used to generate URLs in the Changelog ("github" or "gitlab")')
    ->addOption('skip-vendors', null, InputOption::VALUE_NONE, 'Skip the update of package.json and composer.json')
    ->addOption('no-commit', null, InputOption::VALUE_NONE, 'Do not create a commit and a tag, only update the changelog and vendor files if any')
    ->setCode(function (InputInterface $input, OutputInterface $output): int {
        try {
            return Runner::run($input, $output);
        } catch (Throwable) {
            return Command::FAILURE;
        }
    })
    ->run();
